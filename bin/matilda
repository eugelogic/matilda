#!/usr/bin/env node

const fs = require("fs-extra");
const path = require("path");
const chalk = require("chalk");
const recursive = require("recursive-readdir");
const express = require("express");
const { program } = require("commander");
const handlebars = require("handlebars");
const matter = require("gray-matter");

const pkg = require("../package.json");

let hooks = {};

const paths = {
    root: process.cwd(),
    templates: path.join(process.cwd(), "templates"),
    content: path.join(process.cwd(), "content"),
    static: path.join(process.cwd(), "static"),
    public: path.join(process.cwd(), "public"),
};

const matilda = {
    env: process.env.NODE_ENV,
    version: pkg.version,
};

// --

const calculatePublicPath = (file) => {
    const slug = file.replace(
        new RegExp(`${paths.content}/(.+)(?:\.js|\.html)$`),
        "$1"
    );
    return slug === "404"
        ? "404.html"
        : path.join(slug === "index" ? "" : slug, "index.html");
};

const calculateContentPathFromRequest = (p) => {
    let slug = p.replace(/\/index\.html$/, "").replace(/\/$/, "");
    return path.join(paths.content, `${slug === "" ? "index" : slug}.html`);
};

const readAndWriteContent = async (contentPath, template) => {
    const content = matter(await fs.readFile(contentPath, "utf8"));
    let main = handlebars.compile(content.content)({
        matilda,
        page: content.data,
    });
    if ("transformContent" in hooks) {
        main = await hooks.transformContent(main, {
            data: content.data,
            matilda,
        });
    }
    return handlebars.compile(template)({ matilda, main, page: content.data });
};

const cya = () => {
    console.log(chalk.bgYellow.black`\n Finished. `);
};

const deletePublic = async () => {
    console.log(`Empty: ${chalk.magentaBright`/public`}`);
    await fs.remove(paths.public);
};

// --

const ascii = `
███╗   ███╗ █████╗ ████████╗██╗██╗     ██████╗  █████╗ 
████╗ ████║██╔══██╗╚══██╔══╝██║██║     ██╔══██╗██╔══██╗
██╔████╔██║███████║   ██║   ██║██║     ██║  ██║███████║
██║╚██╔╝██║██╔══██║   ██║   ██║██║     ██║  ██║██╔══██║
██║ ╚═╝ ██║██║  ██║   ██║   ██║███████╗██████╔╝██║  ██║
╚═╝     ╚═╝╚═╝  ╚═╝   ╚═╝   ╚═╝╚══════╝╚═════╝ ╚═╝  ╚═╝
`;

// --

const run = async (command) => {
    try {
        console.log(chalk.yellow`${ascii}\n`);
        try {
            hooks = require(path.join(paths.root, "matilda.js"));
        } catch (e) {
            if (e.code !== `MODULE_NOT_FOUND`) {
                throw e;
            }
        }
        await command();
    } catch (e) {
        console.log(chalk.red`${ascii}`);
        console.error(e);
    }
};

const build = async () => {
    await deletePublic();

    console.log(
        `Copy:  ${chalk.magentaBright`/static`} => ${chalk.magentaBright`/public`}`
    );
    await fs.copy(paths.static, paths.public);

    const files = await recursive(paths.content, ["!*.html"]);
    const template = await fs.readFile(
        path.join(paths.templates, "index.html"),
        "utf8"
    );

    await Promise.all(
        files.map(async (file) => {
            console.log(
                `Read:  ${chalk.greenBright`${file.replace(paths.root, "")}`}`
            );
            const publicPath = calculatePublicPath(file);
            fs.outputFile(
                path.join(paths.public, publicPath),
                await readAndWriteContent(file, template)
            );
            console.log(`Write: ${chalk.blueBright`/public/${publicPath}`}`);
        })
    );
};

const server = async () => {
    const app = express();

    app.use(express.static(paths.static));
    app.get("*", async (req, res) => {
        const contentPath = calculateContentPathFromRequest(req.path);
        if (await fs.exists(contentPath)) {
            const template = await fs.readFile(
                path.join(paths.templates, "index.html"),
                "utf8"
            );
            return res.send(await readAndWriteContent(contentPath, template));
        }
        const path404 = path.join(paths.content, "404.html");
        return res
            .status(404)
            .send(
                (await fs.exists(path404))
                    ? await fs.readFile(path404, "utf8")
                    : "Not Found"
            );
    });

    app.listen(3000, () => {
        console.log(`Server: ${chalk.cyan`http://localhost:3000/`}`);
    });
};

// --

program.version(pkg.version);

program
    .command(`build`)
    .description(`Build a new copy of matilda`)
    .action(async () => {
        await run(build);
    });

program
    .command(`server`)
    .description(`Start a development server for matilda`)
    .action(async () => {
        await run(server);
    });

program
    .command(`clean`)
    .description(`Remove existing build files`)
    .action(async () => {
        await run(async () => {
            await deletePublic();
        });
    });

program.parse(process.argv);

// --

process.on("exit", (code) => {
    cya();
});

process.on("uncaughtException", (e) => {
    if (app) {
        app.close();
    }
    console.error(e);
});
